// Code generated by protoc-gen-go.
// source: cluster.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	cluster.proto

It has these top-level messages:
	Message
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 通用流数据定义
type Message struct {
	Id   uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func init() {
	proto.RegisterType((*Message)(nil), "pb.message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for ClusterService service

type ClusterServiceClient interface {
	Router(ctx context.Context, opts ...grpc.CallOption) (ClusterService_RouterClient, error)
}

type clusterServiceClient struct {
	cc *grpc.ClientConn
}

func NewClusterServiceClient(cc *grpc.ClientConn) ClusterServiceClient {
	return &clusterServiceClient{cc}
}

func (c *clusterServiceClient) Router(ctx context.Context, opts ...grpc.CallOption) (ClusterService_RouterClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterService_serviceDesc.Streams[0], c.cc, "/pb.ClusterService/Router", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterServiceRouterClient{stream}
	return x, nil
}

type ClusterService_RouterClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type clusterServiceRouterClient struct {
	grpc.ClientStream
}

func (x *clusterServiceRouterClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clusterServiceRouterClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ClusterService service

type ClusterServiceServer interface {
	Router(ClusterService_RouterServer) error
}

func RegisterClusterServiceServer(s *grpc.Server, srv ClusterServiceServer) {
	s.RegisterService(&_ClusterService_serviceDesc, srv)
}

func _ClusterService_Router_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClusterServiceServer).Router(&clusterServiceRouterServer{stream})
}

type ClusterService_RouterServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type clusterServiceRouterServer struct {
	grpc.ServerStream
}

func (x *clusterServiceRouterServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clusterServiceRouterServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ClusterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ClusterService",
	HandlerType: (*ClusterServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Router",
			Handler:       _ClusterService_Router_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 128 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xce, 0x29, 0x2d,
	0x2e, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0xd2, 0xe5,
	0x62, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x15, 0xe2, 0xe3, 0x62, 0xca, 0x4c, 0x91, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0d, 0x02, 0xb2, 0x84, 0x84, 0xb8, 0x58, 0x52, 0x12, 0x4b, 0x12, 0x25,
	0x98, 0x80, 0x22, 0x3c, 0x41, 0x60, 0xb6, 0x91, 0x05, 0x17, 0x9f, 0x33, 0xc4, 0x8c, 0xe0, 0xd4,
	0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x35, 0x2e, 0xb6, 0xa0, 0xfc, 0x52, 0xa0, 0x80, 0x10, 0xb7,
	0x5e, 0x41, 0x92, 0x1e, 0xd4, 0x30, 0x29, 0x64, 0x8e, 0x06, 0xa3, 0x01, 0x63, 0x12, 0x1b, 0xd8,
	0x4e, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x90, 0xfb, 0x9c, 0xb2, 0x84, 0x00, 0x00, 0x00,
}
