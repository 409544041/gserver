package main

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"lib/network"
	"net"
	"protomsg"
	"time"

	"github.com/golang/protobuf/proto"
)

func bytesCombine(pBytes ...[]byte) []byte {
	return bytes.Join(pBytes, []byte(""))
}

func loginReq() []byte {
	// 存放消息长度的buf
	msgLenBuf := make([]byte, 2)
	// 消息id
	msgId := uint16(6780)
	// 消息
	msg := &protomsg.LoginReq{
		Id:  proto.Int32(9527),
		Str: proto.String("hello login  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
	}
	msgData, err1 := proto.Marshal(msg)
	if err1 != nil {
		fmt.Println(err1)
	}
	// 数据长度
	msgLen := 2 + len(msgData)
	// 写入数据长度
	binary.BigEndian.PutUint16(msgLenBuf, uint16(msgLen))
	// 存放消息id的buf
	msgIdBuf := make([]byte, 2)
	binary.BigEndian.PutUint16(msgIdBuf, uint16(msgId))
	return bytesCombine(msgLenBuf, msgIdBuf, msgData)
}

func loginAck(conn net.Conn) {
	// 消息解析
	p := network.NewMessageParser()
	wsConn := &network.Conn{
		Conn: conn,
	}
	data, _ := p.Read(wsConn)
	var id uint16
	id = binary.BigEndian.Uint16(data)
	fmt.Println("消息id：", id)
	msg := &protomsg.LoginAck{}
	proto.Unmarshal(data[2:], msg)
	fmt.Println("消息体：", msg.GetStr())
}

func runClient(count int) {
	conn, err := net.Dial("tcp", "localhost:9527")
	if err != nil {
		return
	}
	// 发送完整的消息体
	for i := 0; i < count; i++ {
		conn.Write(loginReq())
		fmt.Println("已经发送消息，等待服务器回复")
		loginAck(conn)
	}
}

func main() {
	for i := 0; i < 2; i++ {
		runClient(2)
	}
	time.Sleep(1e12)
}
