package module

import (
	"lib/goroutine"
)

// 上层骨骼
type Skeleton struct {
	GoLen         int             // goroutine.Go队列长度
	Gog           *goroutine.Go   // 封装的携程
	Client        *chanrpc.Client // rpc-client:非阻塞式的
	Server        *chanrpc.Server // rpc-server:阻塞式的
	AsynCallLen   int             // rpc-client异步调用队列长度
	ChanRPCServer *chanrpc.Server // rpc-server:阻塞式的
	CommandServer *chanrpc.Server // 命令行rpc-server:阻塞式的
}

// 初始化
func (skeleton *Skeleton) Init() {
	if skeleton.GoLen <= 0 {
		skeleton.GoLen = 0
	}
	//	if skeleton.TimerDispatcherLen <= 0 {
	//		skeleton.TimerDispatcherLen = 0
	//	}
	if skeleton.AsynCallLen <= 0 {
		skeleton.AsynCallLen = 0
	}
	skeleton.Gog = goroutine.NewGo(skeleton.GoLen)
	//skeleton.dispatcher = timer.NewDispatcher(skeleton.TimerDispatcherLen)
	skeleton.Client = chanrpc.NewClient(skeleton.AsynCallLen)
	skeleton.Server = skeleton.ChanRPCServer
	if skeleton.Server == nil {
		skeleton.Server = chanrpc.NewServer(0)
	}
	skeleton.CommandServer = chanrpc.NewServer(0)
}

// 以携程的方式运行fun并注册callback
func (skeleton *Skeleton) Go(fun func(), callback func()) {
	if skeleton.GoLen == 0 {
		panic("invalid GoLen")
	}
	skeleton.Gog.Go(fun, callback)
}

// 构建一个上下文环境
func (skeleton *Skeleton) NewLinearContext() *goroutine.LinearContext {
	if skeleton.GoLen == 0 {
		panic("invalid GoLen")
	}
	return skeleton.Gog.NewLinearContext()
}

// 异步调用
func (skeleton *Skeleton) AsynCall(server *chanrpc.Server, key interface{}, args ...interface{}) {
	if skeleton.AsynCallLen == 0 {
		panic("invalid AsynCallLen")
	}
	skeleton.Client.Attach(server)
	skeleton.Client.AsynCall(key, args...)
}

// 向rpc-server中注册一对kv
func (skeleton *Skeleton) RegisterChanRPC(key interface{}, value interface{}) {
	if skeleton.ChanRPCServer == nil {
		panic("invalid ChanRPCServer")
	}
	skeleton.Server.Register(key, value)
}

// 注册命令行rpc
//func (skeleton *Skeleton) RegisterCommand(name string, help string, f interface{}) {
//	console.Register(name, help, f, s.commandServer)
//}

/**********************************实现了imodule接口********************************/

// 执行已经注册的方法
func (skeleton *Skeleton) Run(isClose chan bool) {
	for {
		select {
		case <-isClose:
			skeleton.CommandServer.Close()
			skeleton.Server.Close()
			// 保证已经被注册的方法能够正常完成
			for !skeleton.Gog.Idle() || skeleton.Client.Idle() {
				skeleton.Gog.Close()
				skeleton.Client.Close()
			}
			return
		case ret := <-skeleton.Client.ChanAsynRet:
			skeleton.Client.ExecCB(ret)
		case call := <-skeleton.Server.Chancall:
			skeleton.Server.Exec(call)
		case command := <-skeleton.CommandServer.Chancall:
			skeleton.CommandServer.Exec(command)
		case goF := <-skeleton.Gog.ChanCb:
			skeleton.Gog.CallBack(goF)
		}
	}
}
