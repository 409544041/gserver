// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

/*
Package network is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Data
*/
package network

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Data_FrameType int32

const (
	Data_Message Data_FrameType = 0
	Data_Kick    Data_FrameType = 1
	Data_Ping    Data_FrameType = 2
)

var Data_FrameType_name = map[int32]string{
	0: "Message",
	1: "Kick",
	2: "Ping",
}
var Data_FrameType_value = map[string]int32{
	"Message": 0,
	"Kick":    1,
	"Ping":    2,
}

func (x Data_FrameType) String() string {
	return proto.EnumName(Data_FrameType_name, int32(x))
}
func (Data_FrameType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Data struct {
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Data_Frame struct {
	Type    Data_FrameType `protobuf:"varint,1,opt,name=Type,enum=network.Data_FrameType" json:"Type,omitempty"`
	Message []byte         `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *Data_Frame) Reset()                    { *m = Data_Frame{} }
func (m *Data_Frame) String() string            { return proto.CompactTextString(m) }
func (*Data_Frame) ProtoMessage()               {}
func (*Data_Frame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func init() {
	proto.RegisterType((*Data)(nil), "network.Data")
	proto.RegisterType((*Data_Frame)(nil), "network.Data.Frame")
	proto.RegisterEnum("network.Data_FrameType", Data_FrameType_name, Data_FrameType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Service service

type ServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (Service_StreamClient, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Service_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Service_serviceDesc.Streams[0], c.cc, "/network.Service/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceStreamClient{stream}
	return x, nil
}

type Service_StreamClient interface {
	Send(*Data_Frame) error
	Recv() (*Data_Frame, error)
	grpc.ClientStream
}

type serviceStreamClient struct {
	grpc.ClientStream
}

func (x *serviceStreamClient) Send(m *Data_Frame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceStreamClient) Recv() (*Data_Frame, error) {
	m := new(Data_Frame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Service service

type ServiceServer interface {
	Stream(Service_StreamServer) error
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).Stream(&serviceStreamServer{stream})
}

type Service_StreamServer interface {
	Send(*Data_Frame) error
	Recv() (*Data_Frame, error)
	grpc.ServerStream
}

type serviceStreamServer struct {
	grpc.ServerStream
}

func (x *serviceStreamServer) Send(m *Data_Frame) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceStreamServer) Recv() (*Data_Frame, error) {
	m := new(Data_Frame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "network.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Service_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcf, 0x4b, 0x2d, 0x29, 0xcf,
	0x2f, 0xca, 0x56, 0x6a, 0x61, 0xe4, 0x62, 0x71, 0x49, 0x2c, 0x49, 0x94, 0xf2, 0xe3, 0x62, 0x75,
	0x2b, 0x4a, 0xcc, 0x4d, 0x15, 0xd2, 0xe6, 0x62, 0x09, 0xa9, 0x2c, 0x48, 0x95, 0x60, 0x54, 0x60,
	0xd4, 0xe0, 0x33, 0x12, 0xd7, 0x83, 0xaa, 0xd4, 0x03, 0xa9, 0xd2, 0x03, 0x2b, 0x01, 0x49, 0x07,
	0x81, 0x15, 0x09, 0x49, 0x70, 0xb1, 0xfb, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0x4a, 0x30, 0x01,
	0xd5, 0xf3, 0x04, 0xc1, 0xb8, 0x4a, 0x3a, 0x5c, 0x9c, 0x70, 0xc5, 0x42, 0xdc, 0x70, 0x65, 0x02,
	0x0c, 0x42, 0x1c, 0x5c, 0x2c, 0xde, 0x99, 0xc9, 0xd9, 0x02, 0x8c, 0x20, 0x56, 0x40, 0x66, 0x5e,
	0xba, 0x00, 0x93, 0x91, 0x23, 0x17, 0x7b, 0x30, 0xc4, 0x81, 0x42, 0x66, 0x5c, 0x6c, 0xc1, 0x25,
	0x45, 0xa9, 0x89, 0xb9, 0x42, 0xc2, 0x58, 0xec, 0x96, 0xc2, 0x26, 0xa8, 0xc1, 0x68, 0xc0, 0x98,
	0xc4, 0x06, 0xf6, 0x99, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xb1, 0xb4, 0xf6, 0xa0, 0xea, 0x00,
	0x00, 0x00,
}
